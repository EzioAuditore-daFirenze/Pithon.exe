# Input 2x2 
print("Enter the 2x2 matrix A:")
a11 = float(input("Enter A[0,0]: "))
a12 = float(input("Enter A[0,1]: "))
a21 = float(input("Enter A[1,0]: "))
a22 = float(input("Enter A[1,1]: "))

print("\nEnter the vector b:")
b1 = float(input("Enter b[0]: "))
b2 = float(input("Enter b[1]: "))

A = [[a11, a12], [a21, a22]]
b = [b1, b2]

print("\nMatrix A:")
for row in A:
    print(row)
print("\nVector b:")
print(b)

# |A|
def determinant_2x2(matrix):
    return matrix[0][0] * matrix[1][1] - matrix[0][1] * matrix[1][0]

det_A = determinant_2x2(A)
print(f"\nDeterminant of A: {det_A}")

if abs(det_A) < 1e-10:
    print("Matrix is singular. No unique solution exists.")
    exit()

# Gaussian Elimination Method
def gaussian_elimination(A, b):
    # Create augmented matrix
    n = len(b)
    Ab = []
    for i in range(n):
        row = A[i][:] + [b[i]]
        Ab.append(row)
    
    print("\nGaussian Elimination Steps:")
    print("Initial augmented matrix:")
    for row in Ab:
        print([round(x, 4) for x in row])
    
    # Forward elimination
    for i in range(n):
        pivot = Ab[i][i]
        for j in range(len(Ab[i])):
            Ab[i][j] = Ab[i][j] / pivot
        
        print(f"\nAfter making A[{i},{i}] = 1:")
        for row in Ab:
            print([round(x, 4) for x in row])
        
        for k in range(i + 1, n):
            factor = Ab[k][i]
            for j in range(len(Ab[k])):
                Ab[k][j] = Ab[k][j] - factor * Ab[i][j]
        
        if i < n - 1:
            print(f"After eliminating column {i}:")
            for row in Ab:
                print([round(x, 4) for x in row])
    
    # Back substitution
    x = [0] * n
    for i in range(n - 1, -1, -1):
        x[i] = Ab[i][-1]
        for j in range(i + 1, n):
            x[i] = x[i] - Ab[i][j] * x[j]
    
    return x

x_gaussian = gaussian_elimination(A, b)
print(f"\nSolution using Gauss Eliminatn:")
print(f"x = {x_gaussian}")

# M-¹
def matrix_inverse_2x2(matrix):
    det = determinant_2x2(matrix)
    if abs(det) < 1e-10:
        return None
    
    inv = [[matrix[1][1]/det, -matrix[0][1]/det],
           [-matrix[1][0]/det, matrix[0][0]/det]]
    return inv

def matrix_vector_multiply(matrix, vector):
    result = []
    for i in range(len(matrix)):
        sum_val = 0
        for j in range(len(vector)):
            sum_val += matrix[i][j] * vector[j]
        result.append(sum_val)
    return result

A_inv = matrix_inverse_2x2(A)
print(f"\nInverse of matrix A:")
for row in A_inv:
    print([round(x, 4) for x in row])

x_inverse = matrix_vector_multiply(A_inv, b)
print(f"\nSolution using Inverse Matrix Method:")
print(f"x = {x_inverse}")

# L U Decomp
def lu_decomposition_2x2(matrix):
    # Initialize L and U matrices
    L = [[0, 0], [0, 0]]
    U = [[0, 0], [0, 0]]
    
    
    #  Upper ∆
    U[0][0] = matrix[0][0]
    U[0][1] = matrix[0][1]
    
    # L ∆
    L[0][0] = 1
    L[1][0] = matrix[1][0] / U[0][0]
    L[1][1] = 1
    U[1][1] = matrix[1][1] - L[1][0] * U[0][1]
    
    return L, U

def matrix_multiply_2x2(mat1, mat2):
    result = [[0, 0], [0, 0]]
    for i in range(2):
        for j in range(2):
            for k in range(2):
                result[i][j] += mat1[i][k] * mat2[k][j]
    return result

L, U = lu_decomposition_2x2(A)
print(f"\nLU Decomposition:")
print("L matrix:")
for row in L:
    print([round(x, 4) for x in row])
print("U matrix:")
for row in U:
    print([round(x, 4) for x in row])

# Transpose
def matrix_transpose(matrix):
    rows = len(matrix)
    cols = len(matrix[0])
    transpose = []
    for j in range(cols):
        new_row = []
        for i in range(rows):
            new_row.append(matrix[i][j])
        transpose.append(new_row)
    return transpose

A_transpose = matrix_transpose(A)
print(f"\nTranspose of matrix A:")
for row in A_transpose:
    print(row)

# visualizatio
def plot_equations(A, b, solution):
    print(f"\nVisualization of the system:")
    print(f"Equation 1: {A[0][0]}x + {A[0][1]}y = {b[0]}")
    print(f"Equation 2: {A[1][0]}x + {A[1][1]}y = {b[1]}")
    print(f"Solution point: ({solution[0]:.2f}, {solution[1]:.2f})")
    
    print(f"\nASCII Plot (approximate):")
    print("y")
    print("^")
    
    x_vals = [-2, -1, 0, 1, 2, 3, 4]
    print("Points on Line 1 (y = (c1 - a1*x) / b1):")
    for x in x_vals:
        if A[0][1] != 0:
            y = (b[0] - A[0][0] * x) / A[0][1]
            print(f"  x = {x}, y = {y:.2f}")
    
    print("Points on Line 2 (y = (c2 - a2*x) / b2):")
    for x in x_vals:
        if A[1][1] != 0:
            y = (b[1] - A[1][0] * x) / A[1][1]
            print(f"  x = {x}, y = {y:.2f}")

plot_equations(A, b, x_gaussian)

# Verification
def verify_solution(A, x, b):
    result = matrix_vector_multiply(A, x)
    print(f"\nVerification:")
    print(f"A * x = {[round(val, 6) for val in result]}")
    print(f"b = {b}")
    
    error = 0
    for i in range(len(b)):
        error += (result[i] - b[i]) ** 2
    error = error ** 0.5
    print(f"Error = {error}")
    
    # LU decomposition
    LU_product = matrix_multiply_2x2(L, U)
    print(f"\nLU Verification:")
    print(f"L * U =")
    for row in LU_product:
        print([round(x, 6) for x in row])
    print(f"Original A =")
    for row in A:
        print(row)

verify_solution(A, x_gaussian, b)
