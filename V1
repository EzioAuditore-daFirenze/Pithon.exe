
import numpy as np
import matplotlib.pyplot as plt

# Input 2x2 matrix and vector
A = np.array([[2, 1], 
              [1, 3]])
b = np.array([5, 7])

print("Matrix A:")
print(A)
print("\nVector b:")
print(b)

# Gaussian Elimination Method
def gaussian_elimination(A, b):
    n = len(b)
    Ab = np.column_stack([A, b]).astype(float)
    
    # Forward elimination
    for i in range(n):
        for j in range(i+1, n):
            factor = Ab[j, i] / Ab[i, i]
            Ab[j, :] -= factor * Ab[i, :]
    
    # Back substitution
    x = np.zeros(n)
    for i in range(n-1, -1, -1):
        x[i] = (Ab[i, -1] - np.dot(Ab[i, i+1:n], x[i+1:n])) / Ab[i, i]
    
    return x

# Solve using Gaussian elimination
x_gaussian = gaussian_elimination(A, b)
print("\n# Solution using Gaussian Elimination:")
print(f"x = {x_gaussian}")

# Inverse Matrix Method
A_inv = np.linalg.inv(A)
x_inverse = np.dot(A_inv, b)
print("\n# Solution using Inverse Matrix Method:")
print(f"Inverse of A:\n{A_inv}")
print(f"x = {x_inverse}")

# LU Decomposition
def lu_decomposition(A):
    n = A.shape[0]
    L = np.zeros_like(A, dtype=float)
    U = np.zeros_like(A, dtype=float)
    
    for i in range(n):
        # Upper triangular matrix U
        for k in range(i, n):
            sum_val = sum(L[i][j] * U[j][k] for j in range(i))
            U[i][k] = A[i][k] - sum_val
        
        # Lower triangular matrix L
        for k in range(i, n):
            if i == k:
                L[i][i] = 1
            else:
                sum_val = sum(L[k][j] * U[j][i] for j in range(i))
                L[k][i] = (A[k][i] - sum_val) / U[i][i]
    
    return L, U

L, U = lu_decomposition(A)
print("\n# LU Decomposition:")
print(f"L matrix:\n{L}")
print(f"U matrix:\n{U}")
print(f"Verification (L*U):\n{np.dot(L, U)}")

# Matrix Transpose
A_transpose = A.T
print("\n# Transpose of Matrix A:")
print(A_transpose)

# Visualization of equations as lines in 2D
# Ax = b represents: a11*x1 + a12*x2 = b1 and a21*x1 + a22*x2 = b2
# Rearranging: x2 = (b - a11*x1) / a12

x1_range = np.linspace(-2, 8, 100)

# Line 1: 2*x1 + 1*x2 = 5 -> x2 = 5 - 2*x1
x2_line1 = (b[0] - A[0,0]*x1_range) / A[0,1]

# Line 2: 1*x1 + 3*x2 = 7 -> x2 = (7 - x1) / 3
x2_line2 = (b[1] - A[1,0]*x1_range) / A[1,1]

plt.figure(figsize=(8, 6))
plt.plot(x1_range, x2_line1, 'b-', label=f'{A[0,0]}x₁ + {A[0,1]}x₂ = {b[0]}')
plt.plot(x1_range, x2_line2, 'r-', label=f'{A[1,0]}x₁ + {A[1,1]}x₂ = {b[1]}')
plt.plot(x_gaussian[0], x_gaussian[1], 'go', markersize=8, label=f'Solution ({x_gaussian[0]:.2f}, {x_gaussian[1]:.2f})')
plt.xlabel('x₁')
plt.ylabel('x₂')
plt.title('2x2 Linear System Visualization')
plt.grid(True, alpha=0.3)
plt.legend()
plt.xlim(-1, 6)
plt.ylim(-1, 5)
plt.show()

# Summary
print("\n# Summary:")
print(f"Solution: x₁ = {x_gaussian[0]:.4f}, x₂ = {x_gaussian[1]:.4f}")
print(f"Verification: A*x = {np.dot(A, x_gaussian)}")
print(f"Original b: {b}")
